import streamlit as st
import pandas as pd
import requests
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score

st.set_page_config(page_title="Smart Layout AI", page_icon="üèóÔ∏è", layout="centered")

st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f4f8;
    }
    .stButton>button {
        background: linear-gradient(to right, #0f4c75, #3282b8);
        color: white;
        font-size: 18px;
        border-radius: 10px;
        padding: 0.6em 2em;
    }
    div[data-testid="metric-container"] {
        background-color: white;
        border-radius: 12px;
        padding: 1em;
        margin: 10px 0;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.08);
    }
    div[data-testid="metric-container"] > label, div[data-testid="metric-container"] > div {
        color: #1f2937 !important;
        font-weight: 600;
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

df = pd.read_excel("datalayout.xlsx")
df.columns = df.columns.str.strip()
df['‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏ã‡∏≠‡∏¢'] = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] = df['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô(‡∏ï‡∏£‡∏°)'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] - df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)']
df['%‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)']
‡∏ñ‡∏ô‡∏ô_‡∏ï‡πà‡∏≠_‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞_‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ = df['%‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'].mean()


X_raw = df[['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô']]
y_ratio = pd.DataFrame({
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô': df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'],
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà': df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / (df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'] / 1600),
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': df['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
})

X = pd.get_dummies(X_raw, columns=['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'])
X_train, _, y_train, _ = train_test_split(X, y_ratio, test_size=0.2, random_state=42)
model = MultiOutputRegressor(RandomForestRegressor(n_estimators=100, random_state=42)).fit(X_train, y_train)
avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á = df.groupby('‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£')['‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏ã‡∏≠‡∏¢'].mean().to_dict()

# ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
df_group = df[['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á']].copy()
df_group['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] = df_group['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] / df_group['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df_group['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] = df_group['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] / df_group['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df_group['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] = df_group['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] / df_group['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df_group['%‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå'] = df_group['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå'] / df_group['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
bins = [0, 20000, 40000, 60000, 80000, 100000, float("inf")]
labels = ["‚â§20k", "20k-40k", "40k-60k", "60k-80k", "80k-100k", "100k+"]
df_group['‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà'] = pd.cut(df_group['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'], bins=bins, labels=labels)
grouped_ratio = df_group.groupby(['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà'], observed=True)[["%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°", "%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î", "%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß", "%‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå"]].mean().round(3)
grouped_ratio_dict = grouped_ratio.to_dict(orient="index")

def adjust_by_grade_policy(grade, ratios):
    if grade in ['PRIMO', 'BELLA', 'WATTANALAI']:
        ratios[2] = min(ratios[2], 0.2)
        remain = 1 - ratios[2] - ratios[3]
        ratios[0] = remain * 0.65
        ratios[1] = remain * 0.35
    return ratios

def get_ratio_from_lookup(grade, area):
    group = labels[-1]
    for i, b in enumerate(bins[:-1]):
        if b < area <= bins[i+1]:
            group = labels[i]
            break
    ratio = grouped_ratio_dict.get((grade, group))
    if ratio and any(pd.notna(list(ratio.values()))):
        total = sum([v for v in ratio.values() if pd.notna(v)]) or 1
        ratios = [ratio.get('%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', 0)/total,
                  ratio.get('%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', 0)/total,
                  ratio.get('%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', 0)/total,
                  ratio.get('%‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', 0)/total]
        return adjust_by_grade_policy(grade, ratios)
    return None

# ====== FORM ======
st.markdown("## üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
with st.form("input_form"):
    col1, col2 = st.columns(2)
    with col1:
        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", sorted(df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique()))
        ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á = st.selectbox("üß±Ô∏è ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", sorted(df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique()))
    with col2:
        ‡πÄ‡∏Å‡∏£‡∏î = st.selectbox("üèß ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", sorted(df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique()))
        ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ = st.number_input("üìÄ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤)", min_value=250, value=7500, step=100)
    submitted = st.form_submit_button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# ====== PREDICT ======
if submitted:
    area = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ * 4
    rai = area / 1600
    input_df = pd.DataFrame([{ '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ‡πÄ‡∏Å‡∏£‡∏î, '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)': area, '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á }])
    encoded = pd.get_dummies(input_df)
    for col in X.columns:
        if col not in encoded.columns:
            encoded[col] = 0
    encoded = encoded[X.columns]
    pred = model.predict(encoded)[0]

    ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ = pred[0] * area
    ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ = pred[1] * area
    ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô = pred[2] * area
    ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ * ‡∏ñ‡∏ô‡∏ô_‡∏ï‡πà‡∏≠_‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞_‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏î‡∏µ‡∏ï
    ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° = pred[3] * rai

    ratio_hist = get_ratio_from_lookup(‡πÄ‡∏Å‡∏£‡∏î, area)
    if ratio_hist:
        ‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå = [‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° * r for r in ratio_hist]
    else:
        total = sum(pred[4:8]) or 1
        raw_ratios = [r / total for r in pred[4:8]]
        raw_ratios = adjust_by_grade_policy(‡πÄ‡∏Å‡∏£‡∏î, raw_ratios)
        ‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå = [‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° * r for r in raw_ratios]

    ‡∏ã‡∏≠‡∏¢ = ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° / avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á.get(‡πÄ‡∏Å‡∏£‡∏î, 12)

    st.markdown("---")
    st.markdown("## üåü ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", f"{‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢", f"{‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô", f"{‡∏û‡∏ó_‡∏™‡∏ß‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô", f"{‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    with col2:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°", f"{‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°:,.0f} ‡∏´‡∏•‡∏±‡∏á")
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢", f"{‡∏ã‡∏≠‡∏¢:,.0f} ‡∏ã‡∏≠‡∏¢")

    st.markdown("### üè° ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡πâ‡∏≤‡∏ô")
    st.markdown(f"""
        - ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°: **{‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
        - ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå: **{‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    """)

    y_pred = model.predict(X_train)
    mae = mean_absolute_error(y_train, y_pred)
    r2 = r2_score(y_train, y_pred)
    st.markdown("### üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Train Set)")
    st.write(f"**MAE (Mean Absolute Error):** {mae:.4f}")
    st.write(f"**R¬≤ Score:** {r2:.4f}")
with st.expander("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"):
    st.markdown("### üìç ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô: ‡∏™‡∏≤‡∏°‡πÄ‡∏™‡∏ô‡πÉ‡∏ô ‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)")
    location_input = st.text_input("üó∫Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", value="‡∏™‡∏≤‡∏°‡πÄ‡∏™‡∏ô‡πÉ‡∏ô ‡∏û‡∏ç‡∏≤‡πÑ‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û")

    if st.button("üì° ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"):
        # ====== ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î (Geocoding)
        geocode_url = f"https://nominatim.openstreetmap.org/search"
        geocode_params = {
            'q': location_input,
            'format': 'json',
            'limit': 1
        }
        geo_res = requests.get(geocode_url, params=geocode_params)
        if geo_res.ok and geo_res.json():
            lat = float(geo_res.json()[0]['lat'])
            lon = float(geo_res.json()[0]['lon'])

            # ====== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏≤‡∏Å Overpass API
            radius = 5000  # 5 ‡∏Å‡∏°.
            query = f"""
            [out:json];
            (
              node["building"](around:{radius},{lat},{lon});
              way["building"](around:{radius},{lat},{lon});
              relation["building"](around:{radius},{lat},{lon});
            );
            out center 30;
            """
            osm_url = "https://overpass-api.de/api/interpreter"
            osm_res = requests.get(osm_url, params={'data': query})

            if osm_res.ok:
                data = osm_res.json().get("elements", [])
                named_places = [
                    (e.get('tags', {}).get('name'),
                     e.get('lat') or e.get('center', {}).get('lat'),
                     e.get('lon') or e.get('center', {}).get('lon'))
                    for e in data if 'name' in e.get('tags', {})
                ]

                st.success(f"‚úÖ ‡∏û‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ {len(named_places)} ‡πÅ‡∏´‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 5 ‡∏Å‡∏°.")
                if named_places:
                    for name, lat_p, lon_p in named_places[:10]:
                        st.markdown(f"- üìå **{name}** (lat: {lat_p:.5f}, lon: {lon_p:.5f})")
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ")
            else:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Overpass API ‡πÑ‡∏î‡πâ")
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà")

