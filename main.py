import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import train_test_split

# CONFIG
st.set_page_config(page_title="Smart Layout AI", page_icon="üèóÔ∏è", layout="centered")

# STYLING
st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f4f8;
    }
    .stButton>button {
        background: linear-gradient(to right, #0f4c75, #3282b8);
        color: white;
        font-size: 18px;
        border-radius: 10px;
        padding: 0.6em 2em;
    }
    div[data-testid="metric-container"] {
        background-color: white;
        border-radius: 12px;
        padding: 1em;
        margin: 10px 0;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.08);
    }
    div[data-testid="metric-container"] > label, div[data-testid="metric-container"] > div {
        color: #1f2937 !important;
        font-weight: 600;
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

# LOAD DATA
df = pd.read_excel("updatedata.xlsx")
df.columns = df.columns.str.strip()
df['‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏ã‡∏≠‡∏¢'] = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] = df['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']

X_raw = df[['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô']]
y_ratio = pd.DataFrame({
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô': df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'],
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà': df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / (df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'] / 1600),
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': df['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
})

X = pd.get_dummies(X_raw, columns=['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'])
X_train, _, y_train, _ = train_test_split(X, y_ratio, test_size=0.2, random_state=42)
model = MultiOutputRegressor(RandomForestRegressor(n_estimators=100, random_state=42)).fit(X_train, y_train)
avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á = df.groupby('‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£')['‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏ã‡∏≠‡∏¢'].mean().to_dict()

# FORM INPUT
st.markdown("## üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
with st.form("input_form"):
    col1, col2 = st.columns(2)
    with col1:
        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", sorted(df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique()))
        ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á = st.selectbox("üß±Ô∏è ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", sorted(df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique()))
    with col2:
        ‡πÄ‡∏Å‡∏£‡∏î = st.selectbox("üèß ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", sorted(df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique()))
        ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà = st.number_input("üìÄ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£.‡∏°.)", min_value=1000, value=30000, step=500)
    submitted = st.form_submit_button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

# PREDICTION
if submitted:
    input_df = pd.DataFrame([{ '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ‡πÄ‡∏Å‡∏£‡∏î, '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)': ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà, '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á }])
    encoded = pd.get_dummies(input_df)
    for col in X.columns:
        if col not in encoded.columns:
            encoded[col] = 0
    encoded = encoded[X.columns]
    pred = model.predict(encoded)[0]

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ = pred[1] * (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà / 4)
    ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ = pred[0] * (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà / 4)
    ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô = pred[2] * (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà / 4)
    ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ - ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô
    ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° = pred[3] * (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà / 1600)
    ‡∏ã‡∏≠‡∏¢ = ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° / avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á.get(‡πÄ‡∏Å‡∏£‡∏î, 12)
    ‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°, ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î, ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå = [‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° * r for r in pred[4:8]]

    def calc_err(pred, true):
        return round(abs(pred - true) / true * 100, 2) if true else None

    err_dict = {}
    match_row = df[(df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'] == ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) & (df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] == ‡πÄ‡∏Å‡∏£‡∏î) & (df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'] == ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á)]
    if not match_row.empty:
        row = match_row.iloc[0]
        ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] / 4
        ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] / 4
        ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] / 4
        ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_‡∏à‡∏£‡∏¥‡∏á = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á - ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á
        ‡∏´‡∏•‡∏±‡∏á_‡∏à‡∏£‡∏¥‡∏á = row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á']
        ‡∏ã‡∏≠‡∏¢_‡∏à‡∏£‡∏¥‡∏á = row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢']

        err_dict = {
            'err_‡∏Ç‡∏≤‡∏¢': calc_err(‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢, ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_‡∏à‡∏£‡∏¥‡∏á),
            'err_‡∏™‡∏≤‡∏ò‡∏≤': calc_err(‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤, ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á),
            'err_‡∏™‡∏ß‡∏ô': calc_err(‡∏û‡∏ó_‡∏™‡∏ß‡∏ô, ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á),
            'err_‡∏ñ‡∏ô‡∏ô': calc_err(‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô, ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_‡∏à‡∏£‡∏¥‡∏á),
            'err_‡πÅ‡∏õ‡∏•‡∏á': calc_err(‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°, ‡∏´‡∏•‡∏±‡∏á_‡∏à‡∏£‡∏¥‡∏á),
            'err_‡∏ã‡∏≠‡∏¢': calc_err(‡∏ã‡∏≠‡∏¢, ‡∏ã‡∏≠‡∏¢_‡∏à‡∏£‡∏¥‡∏á)
        }

    def format_err(val):
        return f"{val:.2f} %" if val is not None else "-"

    st.markdown("---")
    st.markdown("## üåü ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ï‡∏£‡∏ß.)", f"{‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡∏Ç‡∏≤‡∏¢'))}")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô (‡∏ï‡∏£‡∏ß.)", f"{‡∏û‡∏ó_‡∏™‡∏ß‡∏ô:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡∏™‡∏ß‡∏ô'))}")
    with col2:
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ (‡∏ï‡∏£‡∏ß.)", f"{‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡∏™‡∏≤‡∏ò‡∏≤'))}")
        st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (‡∏ï‡∏£‡∏ß.)", f"{‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡∏ñ‡∏ô‡∏ô'))}")
    with col3:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏ß‡∏°", f"{‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡πÅ‡∏õ‡∏•‡∏á'))}")
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢", f"{‡∏ã‡∏≠‡∏¢:,.0f}", help=f"Error: {format_err(err_dict.get('err_‡∏ã‡∏≠‡∏¢'))}")

    st.markdown("### üè° ‡πÅ‡∏¢‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ö‡πâ‡∏≤‡∏ô")
    st.markdown(f"""
    - ‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°: **{‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    - ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    - ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß: **{‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    - ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå: **{‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå:,.0f}** ‡∏´‡∏•‡∏±‡∏á  
    """)

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢
    def find_similar_projects(df, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡πÄ‡∏Å‡∏£‡∏î, ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á, ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà, tol=5000):
        return df[
            (df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'] == ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î) &
            (df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] == ‡πÄ‡∏Å‡∏£‡∏î) &
            (df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'] == ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á) &
            (df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'].between(‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà - tol, ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà + tol))
        ]

    similar_df = find_similar_projects(df, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡πÄ‡∏Å‡∏£‡∏î, ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á, ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)

    if not similar_df.empty:
        def calc_errors(row):
            ‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
            ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] / 4
            ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] / 4
            ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á = row['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] / 4
            ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_‡∏à‡∏£‡∏¥‡∏á = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á - ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á
            ‡∏´‡∏•‡∏±‡∏á_‡∏à‡∏£‡∏¥‡∏á = row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á']
            ‡∏ã‡∏≠‡∏¢_‡∏à‡∏£‡∏¥‡∏á = row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢']

            input_temp = pd.DataFrame([{
                '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ‡πÄ‡∏Å‡∏£‡∏î,
                '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)': ‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á, '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á
            }])
            encoded_temp = pd.get_dummies(input_temp)
            for col in X.columns:
                if col not in encoded_temp.columns:
                    encoded_temp[col] = 0
            encoded_temp = encoded_temp[X.columns]

            pred_temp = model.predict(encoded_temp)[0]
            ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_pred = pred_temp[1] * (‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á / 4)
            ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_pred = pred_temp[0] * (‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á / 4)
            ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_pred = pred_temp[2] * (‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á / 4)
            ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_pred = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_pred - ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_pred
            ‡∏´‡∏•‡∏±‡∏á_pred = pred_temp[3] * (‡∏û‡∏ó_‡∏à‡∏£‡∏¥‡∏á / 1600)
            ‡∏ã‡∏≠‡∏¢_pred = ‡∏´‡∏•‡∏±‡∏á_pred / avg_‡∏ã‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á.get(‡πÄ‡∏Å‡∏£‡∏î, 12)

            def err(p, t): return abs(p - t) / t * 100 if t else 0
            return pd.Series({
                'err_‡∏Ç‡∏≤‡∏¢': err(‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_pred, ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢_‡∏à‡∏£‡∏¥‡∏á),
                'err_‡∏™‡∏≤‡∏ò‡∏≤': err(‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_pred, ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤_‡∏à‡∏£‡∏¥‡∏á),
                'err_‡∏™‡∏ß‡∏ô': err(‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_pred, ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô_‡∏à‡∏£‡∏¥‡∏á),
                'err_‡∏ñ‡∏ô‡∏ô': err(‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_pred, ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô_‡∏à‡∏£‡∏¥‡∏á),
                'err_‡πÅ‡∏õ‡∏•‡∏á': err(‡∏´‡∏•‡∏±‡∏á_pred, ‡∏´‡∏•‡∏±‡∏á_‡∏à‡∏£‡∏¥‡∏á),
                'err_‡∏ã‡∏≠‡∏¢': err(‡∏ã‡∏≠‡∏¢_pred, ‡∏ã‡∏≠‡∏¢_‡∏à‡∏£‡∏¥‡∏á)
            })

        error_df = similar_df.apply(calc_errors, axis=1)
        avg_error = error_df.mean()

        st.markdown("### üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", f"{100 - avg_error['err_‡∏Ç‡∏≤‡∏¢']:.2f} %")
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô", f"{100 - avg_error['err_‡∏™‡∏ß‡∏ô']:.2f} %")
        with col2:
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", f"{100 - avg_error['err_‡∏™‡∏≤‡∏ò‡∏≤']:.2f} %")
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô", f"{100 - avg_error['err_‡∏ñ‡∏ô‡∏ô']:.2f} %")
        with col3:
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á", f"{100 - avg_error['err_‡πÅ‡∏õ‡∏•‡∏á']:.2f} %")
            st.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢", f"{100 - avg_error['err_‡∏ã‡∏≠‡∏¢']:.2f} %")
    else:
        st.info("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
from sklearn.metrics import mean_absolute_error, r2_score

# ‡∏´‡∏•‡∏±‡∏á train model ‡πÄ‡∏™‡∏£‡πá‡∏à:
y_pred = model.predict(X_train)

mae = mean_absolute_error(y_train, y_pred)
r2 = r2_score(y_train, y_pred)

st.markdown("### üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (Train Set)")
st.write(f"**MAE (Mean Absolute Error):** {mae:.4f}")
st.write(f"**R¬≤ Score:** {r2:.4f}")

st.caption("Developed by mmethaa | Smart Layout AI üöÄ")
