import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score

st.set_page_config(page_title="Smart Layout AI", page_icon="üèóÔ∏è", layout="centered")

st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f4f8;
    }
    .stButton>button {
        background: linear-gradient(to right, #0f4c75, #3282b8);
        color: white;
        font-size: 18px;
        border-radius: 10px;
        padding: 0.6em 2em;
    }
    div[data-testid="metric-container"] {
        background-color: white;
        border-radius: 12px;
        padding: 1em;
        margin: 10px 0;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.08);
    }
    div[data-testid="metric-container"] > label, div[data-testid="metric-container"] > div {
        color: #1f2937 !important;
        font-weight: 600;
        font-size: 18px;
    }
    </style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
sheet_name = "Sheet1 (2)"
df = pd.read_excel("layoutdata.xlsx", sheet_name=sheet_name)
df.columns = df.columns.str.strip()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
for col in ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á(‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°)', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°)', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á(‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á(‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß(‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)']:
    df[col] = df[col].fillna(0)

# Feature Engineering
for t in ['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß']:
    df[f'‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢({t})'] = df[f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á({t})'] * df[f'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß({t})']

# Target ratios
df['‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡∏ã‡∏≠‡∏¢'] = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ã‡∏≠‡∏¢'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] = df['‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] = df['‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô'] = df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô(5%‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢)'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)']
df['%‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'] = (df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡∏£‡∏ß‡∏°'] / df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤(‡∏ï‡∏£‡∏°)']).fillna(0)

‡∏ñ‡∏ô‡∏ô_‡∏ï‡πà‡∏≠_‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞_‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ = df['%‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'].mean()

# Feature set
X_raw = df[[
    '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô',
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ñ‡∏ô‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°)', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)']]

# Targets
y_ratio = pd.DataFrame({
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô': df['%‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô'],
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà': df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'] / (df['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)'] / 1600),
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°': df['%‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß': df['%‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß'],
    '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': df['‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå'] / df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á'].replace(0, 1)
})

# Encoding
X = pd.get_dummies(X_raw, columns=['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'])
X_train, _, y_train, _ = train_test_split(X, y_ratio, test_size=0.2, random_state=42)

# Model Training
model = MultiOutputRegressor(RandomForestRegressor(n_estimators=100, random_state=42)).fit(X_train, y_train)

# Evaluation
y_pred = model.predict(X_train)
mae = mean_absolute_error(y_train, y_pred)
r2 = r2_score(y_train, y_pred)

st.markdown("## üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.write(f"**MAE (Mean Absolute Error):** {mae:.4f}")
st.write(f"**R¬≤ Score:** {r2:.4f}")

# ====== FORM ======
st.markdown("## üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
with st.form("input_form"):
    col1, col2 = st.columns(2)
    with col1:
        ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", sorted(df['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'].dropna().unique()))
        ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á = st.selectbox("üß±Ô∏è ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", sorted(df['‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô'].dropna().unique()))
    with col2:
        ‡πÄ‡∏Å‡∏£‡∏î = st.selectbox("üèß ‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", sorted(df['‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'].dropna().unique()))
        ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ = st.number_input("üìÄ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤)", min_value=250, value=7500, step=100)
    submitted = st.form_submit_button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
if submitted:
    area = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà_‡∏ß‡∏≤ * 4
    input_data = pd.DataFrame([{
        '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î': ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î,
        '‡πÄ‡∏Å‡∏£‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£': ‡πÄ‡∏Å‡∏£‡∏î,
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£(‡∏ï‡∏£‡∏°)': area,
        '‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô': ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á,
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ñ‡∏ô‡∏ô': df['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ñ‡∏ô‡∏ô'].mean(),  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ user ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥': df['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥'].mean(),
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ó‡∏≤‡∏ß‡πÇ‡∏Æ‡∏°)': 5 * 16,
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ù‡∏î)': 10 * 16,
        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢(‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)': 15 * 18
    }])

    encoded = pd.get_dummies(input_data)
    for col in X.columns:
        if col not in encoded.columns:
            encoded[col] = 0
    encoded = encoded[X.columns]

    prediction = model.predict(encoded)[0]
    ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ = prediction[0] * area
    ‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ = prediction[1] * area
    ‡∏û‡∏ó_‡∏™‡∏ß‡∏ô = prediction[2] * area
    ‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô = ‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ * ‡∏ñ‡∏ô‡∏ô_‡∏ï‡πà‡∏≠_‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞_‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° = prediction[3] * (area / 1600)

    st.markdown("## üåü ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞", f"{‡∏û‡∏ó_‡∏™‡∏≤‡∏ò‡∏≤ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢", f"{‡∏û‡∏ó_‡∏Ç‡∏≤‡∏¢ / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏ô", f"{‡∏û‡∏ó_‡∏™‡∏ß‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    st.metric("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô", f"{‡∏û‡∏ó_‡∏ñ‡∏ô‡∏ô / 4:,.0f} ‡∏ï‡∏£.‡∏ß‡∏≤")
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°", f"{‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°:,.0f} ‡∏´‡∏•‡∏±‡∏á")
